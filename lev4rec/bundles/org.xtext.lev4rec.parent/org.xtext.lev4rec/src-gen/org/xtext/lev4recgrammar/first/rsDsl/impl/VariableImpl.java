/**
 * generated by Xtext 2.23.0
 */
package org.xtext.lev4recgrammar.first.rsDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.lev4recgrammar.first.rsDsl.DataSource;
import org.xtext.lev4recgrammar.first.rsDsl.Preprocessing;
import org.xtext.lev4recgrammar.first.rsDsl.RsDslPackage;
import org.xtext.lev4recgrammar.first.rsDsl.Variable;
import org.xtext.lev4recgrammar.first.rsDsl.VariableType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Variable</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.lev4recgrammar.first.rsDsl.impl.VariableImpl#isIsMissingValueAllowed <em>Is Missing Value Allowed</em>}</li>
 *   <li>{@link org.xtext.lev4recgrammar.first.rsDsl.impl.VariableImpl#isIsMultiple <em>Is Multiple</em>}</li>
 *   <li>{@link org.xtext.lev4recgrammar.first.rsDsl.impl.VariableImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.lev4recgrammar.first.rsDsl.impl.VariableImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.lev4recgrammar.first.rsDsl.impl.VariableImpl#getDataSource <em>Data Source</em>}</li>
 *   <li>{@link org.xtext.lev4recgrammar.first.rsDsl.impl.VariableImpl#getPreprocessing <em>Preprocessing</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VariableImpl extends MinimalEObjectImpl.Container implements Variable
{
  /**
   * The default value of the '{@link #isIsMissingValueAllowed() <em>Is Missing Value Allowed</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsMissingValueAllowed()
   * @generated
   * @ordered
   */
  protected static final boolean IS_MISSING_VALUE_ALLOWED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsMissingValueAllowed() <em>Is Missing Value Allowed</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsMissingValueAllowed()
   * @generated
   * @ordered
   */
  protected boolean isMissingValueAllowed = IS_MISSING_VALUE_ALLOWED_EDEFAULT;

  /**
   * The default value of the '{@link #isIsMultiple() <em>Is Multiple</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsMultiple()
   * @generated
   * @ordered
   */
  protected static final boolean IS_MULTIPLE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsMultiple() <em>Is Multiple</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsMultiple()
   * @generated
   * @ordered
   */
  protected boolean isMultiple = IS_MULTIPLE_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final VariableType TYPE_EDEFAULT = VariableType.STRING;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected VariableType type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getDataSource() <em>Data Source</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataSource()
   * @generated
   * @ordered
   */
  protected DataSource dataSource;

  /**
   * The cached value of the '{@link #getPreprocessing() <em>Preprocessing</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPreprocessing()
   * @generated
   * @ordered
   */
  protected Preprocessing preprocessing;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VariableImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RsDslPackage.Literals.VARIABLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIsMissingValueAllowed()
  {
    return isMissingValueAllowed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsMissingValueAllowed(boolean newIsMissingValueAllowed)
  {
    boolean oldIsMissingValueAllowed = isMissingValueAllowed;
    isMissingValueAllowed = newIsMissingValueAllowed;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RsDslPackage.VARIABLE__IS_MISSING_VALUE_ALLOWED, oldIsMissingValueAllowed, isMissingValueAllowed));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIsMultiple()
  {
    return isMultiple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsMultiple(boolean newIsMultiple)
  {
    boolean oldIsMultiple = isMultiple;
    isMultiple = newIsMultiple;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RsDslPackage.VARIABLE__IS_MULTIPLE, oldIsMultiple, isMultiple));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RsDslPackage.VARIABLE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(VariableType newType)
  {
    VariableType oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RsDslPackage.VARIABLE__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataSource getDataSource()
  {
    return dataSource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDataSource(DataSource newDataSource, NotificationChain msgs)
  {
    DataSource oldDataSource = dataSource;
    dataSource = newDataSource;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RsDslPackage.VARIABLE__DATA_SOURCE, oldDataSource, newDataSource);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDataSource(DataSource newDataSource)
  {
    if (newDataSource != dataSource)
    {
      NotificationChain msgs = null;
      if (dataSource != null)
        msgs = ((InternalEObject)dataSource).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RsDslPackage.VARIABLE__DATA_SOURCE, null, msgs);
      if (newDataSource != null)
        msgs = ((InternalEObject)newDataSource).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RsDslPackage.VARIABLE__DATA_SOURCE, null, msgs);
      msgs = basicSetDataSource(newDataSource, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RsDslPackage.VARIABLE__DATA_SOURCE, newDataSource, newDataSource));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Preprocessing getPreprocessing()
  {
    return preprocessing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPreprocessing(Preprocessing newPreprocessing, NotificationChain msgs)
  {
    Preprocessing oldPreprocessing = preprocessing;
    preprocessing = newPreprocessing;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RsDslPackage.VARIABLE__PREPROCESSING, oldPreprocessing, newPreprocessing);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPreprocessing(Preprocessing newPreprocessing)
  {
    if (newPreprocessing != preprocessing)
    {
      NotificationChain msgs = null;
      if (preprocessing != null)
        msgs = ((InternalEObject)preprocessing).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RsDslPackage.VARIABLE__PREPROCESSING, null, msgs);
      if (newPreprocessing != null)
        msgs = ((InternalEObject)newPreprocessing).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RsDslPackage.VARIABLE__PREPROCESSING, null, msgs);
      msgs = basicSetPreprocessing(newPreprocessing, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RsDslPackage.VARIABLE__PREPROCESSING, newPreprocessing, newPreprocessing));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RsDslPackage.VARIABLE__DATA_SOURCE:
        return basicSetDataSource(null, msgs);
      case RsDslPackage.VARIABLE__PREPROCESSING:
        return basicSetPreprocessing(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RsDslPackage.VARIABLE__IS_MISSING_VALUE_ALLOWED:
        return isIsMissingValueAllowed();
      case RsDslPackage.VARIABLE__IS_MULTIPLE:
        return isIsMultiple();
      case RsDslPackage.VARIABLE__NAME:
        return getName();
      case RsDslPackage.VARIABLE__TYPE:
        return getType();
      case RsDslPackage.VARIABLE__DATA_SOURCE:
        return getDataSource();
      case RsDslPackage.VARIABLE__PREPROCESSING:
        return getPreprocessing();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RsDslPackage.VARIABLE__IS_MISSING_VALUE_ALLOWED:
        setIsMissingValueAllowed((Boolean)newValue);
        return;
      case RsDslPackage.VARIABLE__IS_MULTIPLE:
        setIsMultiple((Boolean)newValue);
        return;
      case RsDslPackage.VARIABLE__NAME:
        setName((String)newValue);
        return;
      case RsDslPackage.VARIABLE__TYPE:
        setType((VariableType)newValue);
        return;
      case RsDslPackage.VARIABLE__DATA_SOURCE:
        setDataSource((DataSource)newValue);
        return;
      case RsDslPackage.VARIABLE__PREPROCESSING:
        setPreprocessing((Preprocessing)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RsDslPackage.VARIABLE__IS_MISSING_VALUE_ALLOWED:
        setIsMissingValueAllowed(IS_MISSING_VALUE_ALLOWED_EDEFAULT);
        return;
      case RsDslPackage.VARIABLE__IS_MULTIPLE:
        setIsMultiple(IS_MULTIPLE_EDEFAULT);
        return;
      case RsDslPackage.VARIABLE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case RsDslPackage.VARIABLE__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case RsDslPackage.VARIABLE__DATA_SOURCE:
        setDataSource((DataSource)null);
        return;
      case RsDslPackage.VARIABLE__PREPROCESSING:
        setPreprocessing((Preprocessing)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RsDslPackage.VARIABLE__IS_MISSING_VALUE_ALLOWED:
        return isMissingValueAllowed != IS_MISSING_VALUE_ALLOWED_EDEFAULT;
      case RsDslPackage.VARIABLE__IS_MULTIPLE:
        return isMultiple != IS_MULTIPLE_EDEFAULT;
      case RsDslPackage.VARIABLE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case RsDslPackage.VARIABLE__TYPE:
        return type != TYPE_EDEFAULT;
      case RsDslPackage.VARIABLE__DATA_SOURCE:
        return dataSource != null;
      case RsDslPackage.VARIABLE__PREPROCESSING:
        return preprocessing != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (isMissingValueAllowed: ");
    result.append(isMissingValueAllowed);
    result.append(", isMultiple: ");
    result.append(isMultiple);
    result.append(", name: ");
    result.append(name);
    result.append(", type: ");
    result.append(type);
    result.append(')');
    return result.toString();
  }

} //VariableImpl
