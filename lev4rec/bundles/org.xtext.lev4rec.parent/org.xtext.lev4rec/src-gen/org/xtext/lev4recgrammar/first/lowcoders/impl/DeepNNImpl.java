/**
 * generated by Xtext 2.23.0
 */
package org.xtext.lev4recgrammar.first.lowcoders.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.lev4recgrammar.first.lowcoders.DeepNN;
import org.xtext.lev4recgrammar.first.lowcoders.LowcodersPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Deep NN</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.lev4recgrammar.first.lowcoders.impl.DeepNNImpl#getNumEpochs <em>Num Epochs</em>}</li>
 *   <li>{@link org.xtext.lev4recgrammar.first.lowcoders.impl.DeepNNImpl#getLearningRate <em>Learning Rate</em>}</li>
 *   <li>{@link org.xtext.lev4recgrammar.first.lowcoders.impl.DeepNNImpl#getMiniBatchSize <em>Mini Batch Size</em>}</li>
 *   <li>{@link org.xtext.lev4recgrammar.first.lowcoders.impl.DeepNNImpl#getNumHiddenLayer <em>Num Hidden Layer</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DeepNNImpl extends RecommendationSystemImpl implements DeepNN
{
  /**
   * The default value of the '{@link #getNumEpochs() <em>Num Epochs</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumEpochs()
   * @generated
   * @ordered
   */
  protected static final int NUM_EPOCHS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getNumEpochs() <em>Num Epochs</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumEpochs()
   * @generated
   * @ordered
   */
  protected int numEpochs = NUM_EPOCHS_EDEFAULT;

  /**
   * The default value of the '{@link #getLearningRate() <em>Learning Rate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLearningRate()
   * @generated
   * @ordered
   */
  protected static final int LEARNING_RATE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getLearningRate() <em>Learning Rate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLearningRate()
   * @generated
   * @ordered
   */
  protected int learningRate = LEARNING_RATE_EDEFAULT;

  /**
   * The default value of the '{@link #getMiniBatchSize() <em>Mini Batch Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMiniBatchSize()
   * @generated
   * @ordered
   */
  protected static final int MINI_BATCH_SIZE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMiniBatchSize() <em>Mini Batch Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMiniBatchSize()
   * @generated
   * @ordered
   */
  protected int miniBatchSize = MINI_BATCH_SIZE_EDEFAULT;

  /**
   * The default value of the '{@link #getNumHiddenLayer() <em>Num Hidden Layer</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumHiddenLayer()
   * @generated
   * @ordered
   */
  protected static final int NUM_HIDDEN_LAYER_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getNumHiddenLayer() <em>Num Hidden Layer</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumHiddenLayer()
   * @generated
   * @ordered
   */
  protected int numHiddenLayer = NUM_HIDDEN_LAYER_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeepNNImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LowcodersPackage.Literals.DEEP_NN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getNumEpochs()
  {
    return numEpochs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNumEpochs(int newNumEpochs)
  {
    int oldNumEpochs = numEpochs;
    numEpochs = newNumEpochs;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LowcodersPackage.DEEP_NN__NUM_EPOCHS, oldNumEpochs, numEpochs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getLearningRate()
  {
    return learningRate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLearningRate(int newLearningRate)
  {
    int oldLearningRate = learningRate;
    learningRate = newLearningRate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LowcodersPackage.DEEP_NN__LEARNING_RATE, oldLearningRate, learningRate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getMiniBatchSize()
  {
    return miniBatchSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMiniBatchSize(int newMiniBatchSize)
  {
    int oldMiniBatchSize = miniBatchSize;
    miniBatchSize = newMiniBatchSize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LowcodersPackage.DEEP_NN__MINI_BATCH_SIZE, oldMiniBatchSize, miniBatchSize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getNumHiddenLayer()
  {
    return numHiddenLayer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNumHiddenLayer(int newNumHiddenLayer)
  {
    int oldNumHiddenLayer = numHiddenLayer;
    numHiddenLayer = newNumHiddenLayer;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LowcodersPackage.DEEP_NN__NUM_HIDDEN_LAYER, oldNumHiddenLayer, numHiddenLayer));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LowcodersPackage.DEEP_NN__NUM_EPOCHS:
        return getNumEpochs();
      case LowcodersPackage.DEEP_NN__LEARNING_RATE:
        return getLearningRate();
      case LowcodersPackage.DEEP_NN__MINI_BATCH_SIZE:
        return getMiniBatchSize();
      case LowcodersPackage.DEEP_NN__NUM_HIDDEN_LAYER:
        return getNumHiddenLayer();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LowcodersPackage.DEEP_NN__NUM_EPOCHS:
        setNumEpochs((Integer)newValue);
        return;
      case LowcodersPackage.DEEP_NN__LEARNING_RATE:
        setLearningRate((Integer)newValue);
        return;
      case LowcodersPackage.DEEP_NN__MINI_BATCH_SIZE:
        setMiniBatchSize((Integer)newValue);
        return;
      case LowcodersPackage.DEEP_NN__NUM_HIDDEN_LAYER:
        setNumHiddenLayer((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LowcodersPackage.DEEP_NN__NUM_EPOCHS:
        setNumEpochs(NUM_EPOCHS_EDEFAULT);
        return;
      case LowcodersPackage.DEEP_NN__LEARNING_RATE:
        setLearningRate(LEARNING_RATE_EDEFAULT);
        return;
      case LowcodersPackage.DEEP_NN__MINI_BATCH_SIZE:
        setMiniBatchSize(MINI_BATCH_SIZE_EDEFAULT);
        return;
      case LowcodersPackage.DEEP_NN__NUM_HIDDEN_LAYER:
        setNumHiddenLayer(NUM_HIDDEN_LAYER_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LowcodersPackage.DEEP_NN__NUM_EPOCHS:
        return numEpochs != NUM_EPOCHS_EDEFAULT;
      case LowcodersPackage.DEEP_NN__LEARNING_RATE:
        return learningRate != LEARNING_RATE_EDEFAULT;
      case LowcodersPackage.DEEP_NN__MINI_BATCH_SIZE:
        return miniBatchSize != MINI_BATCH_SIZE_EDEFAULT;
      case LowcodersPackage.DEEP_NN__NUM_HIDDEN_LAYER:
        return numHiddenLayer != NUM_HIDDEN_LAYER_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (numEpochs: ");
    result.append(numEpochs);
    result.append(", learningRate: ");
    result.append(learningRate);
    result.append(", miniBatchSize: ");
    result.append(miniBatchSize);
    result.append(", numHiddenLayer: ");
    result.append(numHiddenLayer);
    result.append(')');
    return result.toString();
  }

} //DeepNNImpl
