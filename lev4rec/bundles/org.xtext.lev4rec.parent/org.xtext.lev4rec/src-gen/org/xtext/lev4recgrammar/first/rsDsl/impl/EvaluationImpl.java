/**
 * generated by Xtext 2.23.0
 */
package org.xtext.lev4recgrammar.first.rsDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.lev4recgrammar.first.rsDsl.Evaluation;
import org.xtext.lev4recgrammar.first.rsDsl.Metric;
import org.xtext.lev4recgrammar.first.rsDsl.RsDslPackage;
import org.xtext.lev4recgrammar.first.rsDsl.ValidationTechnique;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Evaluation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.lev4recgrammar.first.rsDsl.impl.EvaluationImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.lev4recgrammar.first.rsDsl.impl.EvaluationImpl#getBaselines <em>Baselines</em>}</li>
 *   <li>{@link org.xtext.lev4recgrammar.first.rsDsl.impl.EvaluationImpl#getMetrics <em>Metrics</em>}</li>
 *   <li>{@link org.xtext.lev4recgrammar.first.rsDsl.impl.EvaluationImpl#getValidationTechnique <em>Validation Technique</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EvaluationImpl extends MinimalEObjectImpl.Container implements Evaluation
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getBaselines() <em>Baselines</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBaselines()
   * @generated
   * @ordered
   */
  protected EList<String> baselines;

  /**
   * The cached value of the '{@link #getMetrics() <em>Metrics</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetrics()
   * @generated
   * @ordered
   */
  protected EList<Metric> metrics;

  /**
   * The cached value of the '{@link #getValidationTechnique() <em>Validation Technique</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValidationTechnique()
   * @generated
   * @ordered
   */
  protected EList<ValidationTechnique> validationTechnique;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EvaluationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RsDslPackage.Literals.EVALUATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RsDslPackage.EVALUATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getBaselines()
  {
    if (baselines == null)
    {
      baselines = new EDataTypeEList<String>(String.class, this, RsDslPackage.EVALUATION__BASELINES);
    }
    return baselines;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Metric> getMetrics()
  {
    if (metrics == null)
    {
      metrics = new EDataTypeEList<Metric>(Metric.class, this, RsDslPackage.EVALUATION__METRICS);
    }
    return metrics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ValidationTechnique> getValidationTechnique()
  {
    if (validationTechnique == null)
    {
      validationTechnique = new EObjectContainmentEList<ValidationTechnique>(ValidationTechnique.class, this, RsDslPackage.EVALUATION__VALIDATION_TECHNIQUE);
    }
    return validationTechnique;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RsDslPackage.EVALUATION__VALIDATION_TECHNIQUE:
        return ((InternalEList<?>)getValidationTechnique()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RsDslPackage.EVALUATION__NAME:
        return getName();
      case RsDslPackage.EVALUATION__BASELINES:
        return getBaselines();
      case RsDslPackage.EVALUATION__METRICS:
        return getMetrics();
      case RsDslPackage.EVALUATION__VALIDATION_TECHNIQUE:
        return getValidationTechnique();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RsDslPackage.EVALUATION__NAME:
        setName((String)newValue);
        return;
      case RsDslPackage.EVALUATION__BASELINES:
        getBaselines().clear();
        getBaselines().addAll((Collection<? extends String>)newValue);
        return;
      case RsDslPackage.EVALUATION__METRICS:
        getMetrics().clear();
        getMetrics().addAll((Collection<? extends Metric>)newValue);
        return;
      case RsDslPackage.EVALUATION__VALIDATION_TECHNIQUE:
        getValidationTechnique().clear();
        getValidationTechnique().addAll((Collection<? extends ValidationTechnique>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RsDslPackage.EVALUATION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case RsDslPackage.EVALUATION__BASELINES:
        getBaselines().clear();
        return;
      case RsDslPackage.EVALUATION__METRICS:
        getMetrics().clear();
        return;
      case RsDslPackage.EVALUATION__VALIDATION_TECHNIQUE:
        getValidationTechnique().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RsDslPackage.EVALUATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case RsDslPackage.EVALUATION__BASELINES:
        return baselines != null && !baselines.isEmpty();
      case RsDslPackage.EVALUATION__METRICS:
        return metrics != null && !metrics.isEmpty();
      case RsDslPackage.EVALUATION__VALIDATION_TECHNIQUE:
        return validationTechnique != null && !validationTechnique.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", baselines: ");
    result.append(baselines);
    result.append(", metrics: ");
    result.append(metrics);
    result.append(')');
    return result.toString();
  }

} //EvaluationImpl
