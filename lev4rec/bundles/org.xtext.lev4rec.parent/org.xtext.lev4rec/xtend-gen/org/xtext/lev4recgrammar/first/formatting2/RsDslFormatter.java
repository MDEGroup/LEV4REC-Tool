/**
 * generated by Xtext 2.23.0
 */
package org.xtext.lev4recgrammar.first.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.lev4recgrammar.first.rsDsl.Evaluation;
import org.xtext.lev4recgrammar.first.rsDsl.FeedbackComponent;
import org.xtext.lev4recgrammar.first.rsDsl.PresentationLayer;
import org.xtext.lev4recgrammar.first.rsDsl.RSModel;
import org.xtext.lev4recgrammar.first.rsDsl.RecommendationSystem;
import org.xtext.lev4recgrammar.first.rsDsl.UnsupervisedDataset;
import org.xtext.lev4recgrammar.first.rsDsl.ValidationTechnique;
import org.xtext.lev4recgrammar.first.services.RsDslGrammarAccess;

@SuppressWarnings("all")
public class RsDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RsDslGrammarAccess _rsDslGrammarAccess;
  
  protected void _format(final RSModel rSModel, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      rSModel.getName();
    };
    document.append(this.textRegionExtensions.regionFor(rSModel).keyword("RSModel"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(rSModel).keyword("}"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(rSModel.getDataset()).keyword(":"), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(rSModel.getDataset()).keyword("}"), _function_3);
    document.<PresentationLayer>format(rSModel.getPresentationLayer());
    document.<Evaluation>format(rSModel.getEvaluation());
    document.<RecommendationSystem>format(rSModel.getRecommendationSystem());
    document.<FeedbackComponent>format(rSModel.getFeedback());
  }
  
  protected void _format(final Evaluation evaluation, @Extension final IFormattableDocument document) {
    EList<ValidationTechnique> _validationTechnique = evaluation.getValidationTechnique();
    for (final ValidationTechnique validationTechnique : _validationTechnique) {
      document.<ValidationTechnique>format(validationTechnique);
    }
  }
  
  protected void _format(final UnsupervisedDataset unsupervisedDataset, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(unsupervisedDataset).keyword("{"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(unsupervisedDataset).keyword("}"), _function_1);
  }
  
  public void format(final Object unsupervisedDataset, final IFormattableDocument document) {
    if (unsupervisedDataset instanceof XtextResource) {
      _format((XtextResource)unsupervisedDataset, document);
      return;
    } else if (unsupervisedDataset instanceof UnsupervisedDataset) {
      _format((UnsupervisedDataset)unsupervisedDataset, document);
      return;
    } else if (unsupervisedDataset instanceof Evaluation) {
      _format((Evaluation)unsupervisedDataset, document);
      return;
    } else if (unsupervisedDataset instanceof RSModel) {
      _format((RSModel)unsupervisedDataset, document);
      return;
    } else if (unsupervisedDataset instanceof EObject) {
      _format((EObject)unsupervisedDataset, document);
      return;
    } else if (unsupervisedDataset == null) {
      _format((Void)null, document);
      return;
    } else if (unsupervisedDataset != null) {
      _format(unsupervisedDataset, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(unsupervisedDataset, document).toString());
    }
  }
}
