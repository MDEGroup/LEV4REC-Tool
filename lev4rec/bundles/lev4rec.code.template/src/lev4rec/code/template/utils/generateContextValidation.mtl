[comment encoding = UTF-8 /]
[module generateContextValidation('https://it.disim.univaq/lowcode')]

[template public generateContextValidation(recSys : RSModel)]
[for (val : ValidationTechnique | recSys.evaluation.validationTechnique)]
[if (val.oclIsTypeOf(lowcoders::ContextValidation))]
[if (recSys.recommendationSystem.generator = PyLibType::SKLEARN)]
var = input("Please enter a code snippet: ")
docs_new = ['['/]var[']'/]
X_new_counts = count_vect.transform(docs_new)
X_new_tfidf = tfidf_transformer.transform(X_new_counts)
predicted = clf.predict(X_new_tfidf)
print('predicted as',predicted)
[/if]
[if (recSys.recommendationSystem.generator = PyLibType::SURPRISE)]
[if (recSys.dataset.isBuiltIn = true)]
	from collections import defaultdict
	data = load_dataset()
	trainset = data.build_full_trainset()
    algo = algorithm_settings()
    algo.fit(trainset)
    testset = trainset.build_anti_testset()
    predictions = algo.test(testset)
    
    top_n = defaultdict(list)
    for uid, iid, true_r, est, _ in predictions:
        top_n['['/]uid[']'/].append((iid, est))
    
    for uid, user_ratings in top_n.items():
        user_ratings.sort(key=lambda x: x['['/]1[']'/] , reverse=True)
        top_n['['/]uid[']'/] = user_ratings['['/]:n_items[']'/] 

	results = top_n.get(context)
[/if]
[if  (recSys.dataset.isBuiltIn = false)]
	lista = ['['/][']'/]
    ['['/]lista.append(['['/]"query", lib, 1[']'/]) for lib in context[']'/]
    df = pd.read_csv('result.csv', sep=",")
    queryDF = pd.DataFrame(lista,columns=['['/]'ProjectID', 'LibID', 'rating'[']'/])   
    df = df.append(queryDF, ignore_index=True)
    reader = Reader(rating_scale=(0, 1))
    data = Dataset.load_from_df(df['['/]['['/]'ProjectID', 'LibID', 'rating'[']'/][']'/], reader)
    
    algo = algorithm settings()
   	k = 0
    #TRAIN
    trainset = data.build_full_trainset()
    algo.fit(trainset)
    list_ird = ['['/]trainset.to_raw_iid(key) for key in trainset.ir.keys()[']'/]
    result = {}
    for elem in list_ird:
        k = algo.predict(uid="query", iid=elem)
        result['['/]elem[']'/] = k.est
    sorted_result = {k: v for k, v in sorted(result.items(), key=lambda item: item['['/]1[']'/], reverse=True)}

    results = list(sorted_result.keys())['['/] : n_items[']'/]
[/if]
[/if]
[/if]
[/for]
[/template]
